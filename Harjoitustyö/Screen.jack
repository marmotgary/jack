/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static Array screen;
    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		
		let i = 0;
		while(i<8192) {
			let screen[i] = 0;
			let i = i+1;
		}
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
	function void drawPixel(int x, int y) {
		var int address;
		var int mask;
		
		let address = (y*32) + (x/16);
		let mask = Math.two_to_the(x & 15); 
		let screen[address] = screen[address] | mask;
		return;
	}
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
	function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy, sx, i;

		if (y1 > y2) {
			do Screen.drawLine(x2, y2, x1, y1);
			return;
		}

		let dx = x2 - x1;

		let sx = 1;

		if (dx < 0) {
			let sx = -1;
			let dx = -dx;
		}

		let dy = y2 - y1;

		if (dy = 0) { // horizontal
			let i = x1;
			while (~(i = x2)) {
			  do Screen.drawPixel(i, y1);
			  let i = i + sx;
			}
		return;
		}

		if (dx = 0) { // vertical
			let i = y1;
			while (~(i = y2)) {
			  do Screen.drawPixel(x1, i);
			  let i = i + 1;
			}
		return;
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    return;
	}
}

